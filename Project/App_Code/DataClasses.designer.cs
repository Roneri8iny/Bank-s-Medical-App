#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;



[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Bank Medical DB")]
public partial class DataClassesDataContext : System.Data.Linq.DataContext
{
	
	private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
	
  #region Extensibility Method Definitions
  partial void OnCreated();
  partial void InsertTimetable(Timetable instance);
  partial void UpdateTimetable(Timetable instance);
  partial void DeleteTimetable(Timetable instance);
  partial void InsertAppointment(Appointment instance);
  partial void UpdateAppointment(Appointment instance);
  partial void DeleteAppointment(Appointment instance);
  partial void InsertDepartment(Department instance);
  partial void UpdateDepartment(Department instance);
  partial void DeleteDepartment(Department instance);
  partial void InsertDoctor(Doctor instance);
  partial void UpdateDoctor(Doctor instance);
  partial void DeleteDoctor(Doctor instance);
  partial void InsertEmployee(Employee instance);
  partial void UpdateEmployee(Employee instance);
  partial void DeleteEmployee(Employee instance);
  partial void InsertFinance(Finance instance);
  partial void UpdateFinance(Finance instance);
  partial void DeleteFinance(Finance instance);
  partial void InsertLabReport(LabReport instance);
  partial void UpdateLabReport(LabReport instance);
  partial void DeleteLabReport(LabReport instance);
  partial void InsertLabReportsDetail(LabReportsDetail instance);
  partial void UpdateLabReportsDetail(LabReportsDetail instance);
  partial void DeleteLabReportsDetail(LabReportsDetail instance);
  partial void InsertMedicalField(MedicalField instance);
  partial void UpdateMedicalField(MedicalField instance);
  partial void DeleteMedicalField(MedicalField instance);
  partial void InsertMedicine(Medicine instance);
  partial void UpdateMedicine(Medicine instance);
  partial void DeleteMedicine(Medicine instance);
  partial void InsertMiddleMan(MiddleMan instance);
  partial void UpdateMiddleMan(MiddleMan instance);
  partial void DeleteMiddleMan(MiddleMan instance);
  partial void InsertPrescription(Prescription instance);
  partial void UpdatePrescription(Prescription instance);
  partial void DeletePrescription(Prescription instance);
  partial void InsertPrescriptionsDetail(PrescriptionsDetail instance);
  partial void UpdatePrescriptionsDetail(PrescriptionsDetail instance);
  partial void DeletePrescriptionsDetail(PrescriptionsDetail instance);
  partial void InsertTest(Test instance);
  partial void UpdateTest(Test instance);
  partial void DeleteTest(Test instance);
  #endregion
	
	public DataClassesDataContext() : 
			base(global::System.Configuration.ConfigurationManager.ConnectionStrings["Bank_Medical_DBConnectionString"].ConnectionString, mappingSource)
	{
		OnCreated();
	}
	
	public DataClassesDataContext(string connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public DataClassesDataContext(System.Data.IDbConnection connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public DataClassesDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public DataClassesDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public System.Data.Linq.Table<Timetable> Timetables
	{
		get
		{
			return this.GetTable<Timetable>();
		}
	}
	
	public System.Data.Linq.Table<Appointment> Appointments
	{
		get
		{
			return this.GetTable<Appointment>();
		}
	}
	
	public System.Data.Linq.Table<Department> Departments
	{
		get
		{
			return this.GetTable<Department>();
		}
	}
	
	public System.Data.Linq.Table<Doctor> Doctors
	{
		get
		{
			return this.GetTable<Doctor>();
		}
	}
	
	public System.Data.Linq.Table<Employee> Employees
	{
		get
		{
			return this.GetTable<Employee>();
		}
	}
	
	public System.Data.Linq.Table<Finance> Finances
	{
		get
		{
			return this.GetTable<Finance>();
		}
	}
	
	public System.Data.Linq.Table<LabReport> LabReports
	{
		get
		{
			return this.GetTable<LabReport>();
		}
	}
	
	public System.Data.Linq.Table<LabReportsDetail> LabReportsDetails
	{
		get
		{
			return this.GetTable<LabReportsDetail>();
		}
	}
	
	public System.Data.Linq.Table<MedicalField> MedicalFields
	{
		get
		{
			return this.GetTable<MedicalField>();
		}
	}
	
	public System.Data.Linq.Table<Medicine> Medicines
	{
		get
		{
			return this.GetTable<Medicine>();
		}
	}
	
	public System.Data.Linq.Table<MiddleMan> MiddleMans
	{
		get
		{
			return this.GetTable<MiddleMan>();
		}
	}
	
	public System.Data.Linq.Table<Prescription> Prescriptions
	{
		get
		{
			return this.GetTable<Prescription>();
		}
	}
	
	public System.Data.Linq.Table<PrescriptionsDetail> PrescriptionsDetails
	{
		get
		{
			return this.GetTable<PrescriptionsDetail>();
		}
	}
	
	public System.Data.Linq.Table<Test> Tests
	{
		get
		{
			return this.GetTable<Test>();
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Timetable")]
public partial class Timetable : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _SlotID;
	
	private System.Nullable<int> _DoctorID;
	
	private string _TTDay;
	
	private System.TimeSpan _StartTime;
	
	private System.TimeSpan _EndTime;
	
	private EntitySet<Appointment> _Appointments;
	
	private EntityRef<Doctor> _Doctor;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSlotIDChanging(int value);
    partial void OnSlotIDChanged();
    partial void OnDoctorIDChanging(System.Nullable<int> value);
    partial void OnDoctorIDChanged();
    partial void OnTTDayChanging(string value);
    partial void OnTTDayChanged();
    partial void OnStartTimeChanging(System.TimeSpan value);
    partial void OnStartTimeChanged();
    partial void OnEndTimeChanging(System.TimeSpan value);
    partial void OnEndTimeChanged();
    #endregion
	
	public Timetable()
	{
		this._Appointments = new EntitySet<Appointment>(new Action<Appointment>(this.attach_Appointments), new Action<Appointment>(this.detach_Appointments));
		this._Doctor = default(EntityRef<Doctor>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SlotID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int SlotID
	{
		get
		{
			return this._SlotID;
		}
		set
		{
			if ((this._SlotID != value))
			{
				this.OnSlotIDChanging(value);
				this.SendPropertyChanging();
				this._SlotID = value;
				this.SendPropertyChanged("SlotID");
				this.OnSlotIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DoctorID", DbType="Int")]
	public System.Nullable<int> DoctorID
	{
		get
		{
			return this._DoctorID;
		}
		set
		{
			if ((this._DoctorID != value))
			{
				if (this._Doctor.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnDoctorIDChanging(value);
				this.SendPropertyChanging();
				this._DoctorID = value;
				this.SendPropertyChanged("DoctorID");
				this.OnDoctorIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TTDay", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
	public string TTDay
	{
		get
		{
			return this._TTDay;
		}
		set
		{
			if ((this._TTDay != value))
			{
				this.OnTTDayChanging(value);
				this.SendPropertyChanging();
				this._TTDay = value;
				this.SendPropertyChanged("TTDay");
				this.OnTTDayChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartTime", DbType="Time NOT NULL")]
	public System.TimeSpan StartTime
	{
		get
		{
			return this._StartTime;
		}
		set
		{
			if ((this._StartTime != value))
			{
				this.OnStartTimeChanging(value);
				this.SendPropertyChanging();
				this._StartTime = value;
				this.SendPropertyChanged("StartTime");
				this.OnStartTimeChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EndTime", DbType="Time NOT NULL")]
	public System.TimeSpan EndTime
	{
		get
		{
			return this._EndTime;
		}
		set
		{
			if ((this._EndTime != value))
			{
				this.OnEndTimeChanging(value);
				this.SendPropertyChanging();
				this._EndTime = value;
				this.SendPropertyChanged("EndTime");
				this.OnEndTimeChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Timetable_Appointment", Storage="_Appointments", ThisKey="SlotID", OtherKey="SlotID")]
	public EntitySet<Appointment> Appointments
	{
		get
		{
			return this._Appointments;
		}
		set
		{
			this._Appointments.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Doctor_Timetable", Storage="_Doctor", ThisKey="DoctorID", OtherKey="DoctorID", IsForeignKey=true)]
	public Doctor Doctor
	{
		get
		{
			return this._Doctor.Entity;
		}
		set
		{
			Doctor previousValue = this._Doctor.Entity;
			if (((previousValue != value) 
						|| (this._Doctor.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Doctor.Entity = null;
					previousValue.Timetables.Remove(this);
				}
				this._Doctor.Entity = value;
				if ((value != null))
				{
					value.Timetables.Add(this);
					this._DoctorID = value.DoctorID;
				}
				else
				{
					this._DoctorID = default(Nullable<int>);
				}
				this.SendPropertyChanged("Doctor");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Appointments(Appointment entity)
	{
		this.SendPropertyChanging();
		entity.Timetable = this;
	}
	
	private void detach_Appointments(Appointment entity)
	{
		this.SendPropertyChanging();
		entity.Timetable = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Appointments")]
public partial class Appointment : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _AppointmentID;
	
	private System.Nullable<int> _SlotID;
	
	private System.Nullable<int> _EmployeeID;
	
	private int _ApStatus;
	
	private string _Diagnosis;
	
	private System.Nullable<int> _FinanceID;
	
	private EntitySet<LabReport> _LabReports;
	
	private EntitySet<Prescription> _Prescriptions;
	
	private EntityRef<Timetable> _Timetable;
	
	private EntityRef<Employee> _Employee;
	
	private EntityRef<Finance> _Finance;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAppointmentIDChanging(int value);
    partial void OnAppointmentIDChanged();
    partial void OnSlotIDChanging(System.Nullable<int> value);
    partial void OnSlotIDChanged();
    partial void OnEmployeeIDChanging(System.Nullable<int> value);
    partial void OnEmployeeIDChanged();
    partial void OnApStatusChanging(int value);
    partial void OnApStatusChanged();
    partial void OnDiagnosisChanging(string value);
    partial void OnDiagnosisChanged();
    partial void OnFinanceIDChanging(System.Nullable<int> value);
    partial void OnFinanceIDChanged();
    #endregion
	
	public Appointment()
	{
		this._LabReports = new EntitySet<LabReport>(new Action<LabReport>(this.attach_LabReports), new Action<LabReport>(this.detach_LabReports));
		this._Prescriptions = new EntitySet<Prescription>(new Action<Prescription>(this.attach_Prescriptions), new Action<Prescription>(this.detach_Prescriptions));
		this._Timetable = default(EntityRef<Timetable>);
		this._Employee = default(EntityRef<Employee>);
		this._Finance = default(EntityRef<Finance>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AppointmentID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int AppointmentID
	{
		get
		{
			return this._AppointmentID;
		}
		set
		{
			if ((this._AppointmentID != value))
			{
				this.OnAppointmentIDChanging(value);
				this.SendPropertyChanging();
				this._AppointmentID = value;
				this.SendPropertyChanged("AppointmentID");
				this.OnAppointmentIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SlotID", DbType="Int")]
	public System.Nullable<int> SlotID
	{
		get
		{
			return this._SlotID;
		}
		set
		{
			if ((this._SlotID != value))
			{
				if (this._Timetable.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnSlotIDChanging(value);
				this.SendPropertyChanging();
				this._SlotID = value;
				this.SendPropertyChanged("SlotID");
				this.OnSlotIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeID", DbType="Int")]
	public System.Nullable<int> EmployeeID
	{
		get
		{
			return this._EmployeeID;
		}
		set
		{
			if ((this._EmployeeID != value))
			{
				if (this._Employee.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnEmployeeIDChanging(value);
				this.SendPropertyChanging();
				this._EmployeeID = value;
				this.SendPropertyChanged("EmployeeID");
				this.OnEmployeeIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ApStatus", DbType="Int NOT NULL")]
	public int ApStatus
	{
		get
		{
			return this._ApStatus;
		}
		set
		{
			if ((this._ApStatus != value))
			{
				this.OnApStatusChanging(value);
				this.SendPropertyChanging();
				this._ApStatus = value;
				this.SendPropertyChanged("ApStatus");
				this.OnApStatusChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Diagnosis", DbType="NVarChar(MAX)")]
	public string Diagnosis
	{
		get
		{
			return this._Diagnosis;
		}
		set
		{
			if ((this._Diagnosis != value))
			{
				this.OnDiagnosisChanging(value);
				this.SendPropertyChanging();
				this._Diagnosis = value;
				this.SendPropertyChanged("Diagnosis");
				this.OnDiagnosisChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FinanceID", DbType="Int")]
	public System.Nullable<int> FinanceID
	{
		get
		{
			return this._FinanceID;
		}
		set
		{
			if ((this._FinanceID != value))
			{
				if (this._Finance.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnFinanceIDChanging(value);
				this.SendPropertyChanging();
				this._FinanceID = value;
				this.SendPropertyChanged("FinanceID");
				this.OnFinanceIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Appointment_LabReport", Storage="_LabReports", ThisKey="AppointmentID", OtherKey="AppointmentID")]
	public EntitySet<LabReport> LabReports
	{
		get
		{
			return this._LabReports;
		}
		set
		{
			this._LabReports.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Appointment_Prescription", Storage="_Prescriptions", ThisKey="AppointmentID", OtherKey="AppointmentID")]
	public EntitySet<Prescription> Prescriptions
	{
		get
		{
			return this._Prescriptions;
		}
		set
		{
			this._Prescriptions.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Timetable_Appointment", Storage="_Timetable", ThisKey="SlotID", OtherKey="SlotID", IsForeignKey=true)]
	public Timetable Timetable
	{
		get
		{
			return this._Timetable.Entity;
		}
		set
		{
			Timetable previousValue = this._Timetable.Entity;
			if (((previousValue != value) 
						|| (this._Timetable.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Timetable.Entity = null;
					previousValue.Appointments.Remove(this);
				}
				this._Timetable.Entity = value;
				if ((value != null))
				{
					value.Appointments.Add(this);
					this._SlotID = value.SlotID;
				}
				else
				{
					this._SlotID = default(Nullable<int>);
				}
				this.SendPropertyChanged("Timetable");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_Appointment", Storage="_Employee", ThisKey="EmployeeID", OtherKey="EmployeeID", IsForeignKey=true)]
	public Employee Employee
	{
		get
		{
			return this._Employee.Entity;
		}
		set
		{
			Employee previousValue = this._Employee.Entity;
			if (((previousValue != value) 
						|| (this._Employee.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Employee.Entity = null;
					previousValue.Appointments.Remove(this);
				}
				this._Employee.Entity = value;
				if ((value != null))
				{
					value.Appointments.Add(this);
					this._EmployeeID = value.EmployeeID;
				}
				else
				{
					this._EmployeeID = default(Nullable<int>);
				}
				this.SendPropertyChanged("Employee");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Finance_Appointment", Storage="_Finance", ThisKey="FinanceID", OtherKey="FinanceID", IsForeignKey=true)]
	public Finance Finance
	{
		get
		{
			return this._Finance.Entity;
		}
		set
		{
			Finance previousValue = this._Finance.Entity;
			if (((previousValue != value) 
						|| (this._Finance.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Finance.Entity = null;
					previousValue.Appointments.Remove(this);
				}
				this._Finance.Entity = value;
				if ((value != null))
				{
					value.Appointments.Add(this);
					this._FinanceID = value.FinanceID;
				}
				else
				{
					this._FinanceID = default(Nullable<int>);
				}
				this.SendPropertyChanged("Finance");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_LabReports(LabReport entity)
	{
		this.SendPropertyChanging();
		entity.Appointment = this;
	}
	
	private void detach_LabReports(LabReport entity)
	{
		this.SendPropertyChanging();
		entity.Appointment = null;
	}
	
	private void attach_Prescriptions(Prescription entity)
	{
		this.SendPropertyChanging();
		entity.Appointment = this;
	}
	
	private void detach_Prescriptions(Prescription entity)
	{
		this.SendPropertyChanging();
		entity.Appointment = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Departments")]
public partial class Department : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _DepartmentID;
	
	private string _DepartmentName;
	
	private EntitySet<Doctor> _Doctors;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDepartmentIDChanging(int value);
    partial void OnDepartmentIDChanged();
    partial void OnDepartmentNameChanging(string value);
    partial void OnDepartmentNameChanged();
    #endregion
	
	public Department()
	{
		this._Doctors = new EntitySet<Doctor>(new Action<Doctor>(this.attach_Doctors), new Action<Doctor>(this.detach_Doctors));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DepartmentID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int DepartmentID
	{
		get
		{
			return this._DepartmentID;
		}
		set
		{
			if ((this._DepartmentID != value))
			{
				this.OnDepartmentIDChanging(value);
				this.SendPropertyChanging();
				this._DepartmentID = value;
				this.SendPropertyChanged("DepartmentID");
				this.OnDepartmentIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DepartmentName", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
	public string DepartmentName
	{
		get
		{
			return this._DepartmentName;
		}
		set
		{
			if ((this._DepartmentName != value))
			{
				this.OnDepartmentNameChanging(value);
				this.SendPropertyChanging();
				this._DepartmentName = value;
				this.SendPropertyChanged("DepartmentName");
				this.OnDepartmentNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Department_Doctor", Storage="_Doctors", ThisKey="DepartmentID", OtherKey="DepartmentID")]
	public EntitySet<Doctor> Doctors
	{
		get
		{
			return this._Doctors;
		}
		set
		{
			this._Doctors.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Doctors(Doctor entity)
	{
		this.SendPropertyChanging();
		entity.Department = this;
	}
	
	private void detach_Doctors(Doctor entity)
	{
		this.SendPropertyChanging();
		entity.Department = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Doctor")]
public partial class Doctor : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _DoctorID;
	
	private System.Nullable<int> _DepartmentID;
	
	private System.Nullable<int> _MFID;
	
	private string _Username;
	
	private decimal _Price;
	
	private string _DoctorName;
	
	private string _Position;
	
	private string _DoctorPassword;
	
	private long _Mobile;
	
	private EntitySet<Timetable> _Timetables;
	
	private EntityRef<Department> _Department;
	
	private EntityRef<MedicalField> _MedicalField;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDoctorIDChanging(int value);
    partial void OnDoctorIDChanged();
    partial void OnDepartmentIDChanging(System.Nullable<int> value);
    partial void OnDepartmentIDChanged();
    partial void OnMFIDChanging(System.Nullable<int> value);
    partial void OnMFIDChanged();
    partial void OnUsernameChanging(string value);
    partial void OnUsernameChanged();
    partial void OnPriceChanging(decimal value);
    partial void OnPriceChanged();
    partial void OnDoctorNameChanging(string value);
    partial void OnDoctorNameChanged();
    partial void OnPositionChanging(string value);
    partial void OnPositionChanged();
    partial void OnDoctorPasswordChanging(string value);
    partial void OnDoctorPasswordChanged();
    partial void OnMobileChanging(long value);
    partial void OnMobileChanged();
    #endregion
	
	public Doctor()
	{
		this._Timetables = new EntitySet<Timetable>(new Action<Timetable>(this.attach_Timetables), new Action<Timetable>(this.detach_Timetables));
		this._Department = default(EntityRef<Department>);
		this._MedicalField = default(EntityRef<MedicalField>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DoctorID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int DoctorID
	{
		get
		{
			return this._DoctorID;
		}
		set
		{
			if ((this._DoctorID != value))
			{
				this.OnDoctorIDChanging(value);
				this.SendPropertyChanging();
				this._DoctorID = value;
				this.SendPropertyChanged("DoctorID");
				this.OnDoctorIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DepartmentID", DbType="Int")]
	public System.Nullable<int> DepartmentID
	{
		get
		{
			return this._DepartmentID;
		}
		set
		{
			if ((this._DepartmentID != value))
			{
				if (this._Department.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnDepartmentIDChanging(value);
				this.SendPropertyChanging();
				this._DepartmentID = value;
				this.SendPropertyChanged("DepartmentID");
				this.OnDepartmentIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MFID", DbType="Int")]
	public System.Nullable<int> MFID
	{
		get
		{
			return this._MFID;
		}
		set
		{
			if ((this._MFID != value))
			{
				if (this._MedicalField.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnMFIDChanging(value);
				this.SendPropertyChanging();
				this._MFID = value;
				this.SendPropertyChanged("MFID");
				this.OnMFIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Username", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
	public string Username
	{
		get
		{
			return this._Username;
		}
		set
		{
			if ((this._Username != value))
			{
				this.OnUsernameChanging(value);
				this.SendPropertyChanging();
				this._Username = value;
				this.SendPropertyChanged("Username");
				this.OnUsernameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Price", DbType="Decimal(18,0) NOT NULL")]
	public decimal Price
	{
		get
		{
			return this._Price;
		}
		set
		{
			if ((this._Price != value))
			{
				this.OnPriceChanging(value);
				this.SendPropertyChanging();
				this._Price = value;
				this.SendPropertyChanged("Price");
				this.OnPriceChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DoctorName", DbType="NVarChar(100)")]
	public string DoctorName
	{
		get
		{
			return this._DoctorName;
		}
		set
		{
			if ((this._DoctorName != value))
			{
				this.OnDoctorNameChanging(value);
				this.SendPropertyChanging();
				this._DoctorName = value;
				this.SendPropertyChanged("DoctorName");
				this.OnDoctorNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Position", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
	public string Position
	{
		get
		{
			return this._Position;
		}
		set
		{
			if ((this._Position != value))
			{
				this.OnPositionChanging(value);
				this.SendPropertyChanging();
				this._Position = value;
				this.SendPropertyChanged("Position");
				this.OnPositionChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DoctorPassword", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
	public string DoctorPassword
	{
		get
		{
			return this._DoctorPassword;
		}
		set
		{
			if ((this._DoctorPassword != value))
			{
				this.OnDoctorPasswordChanging(value);
				this.SendPropertyChanging();
				this._DoctorPassword = value;
				this.SendPropertyChanged("DoctorPassword");
				this.OnDoctorPasswordChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Mobile", DbType="BigInt NOT NULL")]
	public long Mobile
	{
		get
		{
			return this._Mobile;
		}
		set
		{
			if ((this._Mobile != value))
			{
				this.OnMobileChanging(value);
				this.SendPropertyChanging();
				this._Mobile = value;
				this.SendPropertyChanged("Mobile");
				this.OnMobileChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Doctor_Timetable", Storage="_Timetables", ThisKey="DoctorID", OtherKey="DoctorID")]
	public EntitySet<Timetable> Timetables
	{
		get
		{
			return this._Timetables;
		}
		set
		{
			this._Timetables.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Department_Doctor", Storage="_Department", ThisKey="DepartmentID", OtherKey="DepartmentID", IsForeignKey=true)]
	public Department Department
	{
		get
		{
			return this._Department.Entity;
		}
		set
		{
			Department previousValue = this._Department.Entity;
			if (((previousValue != value) 
						|| (this._Department.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Department.Entity = null;
					previousValue.Doctors.Remove(this);
				}
				this._Department.Entity = value;
				if ((value != null))
				{
					value.Doctors.Add(this);
					this._DepartmentID = value.DepartmentID;
				}
				else
				{
					this._DepartmentID = default(Nullable<int>);
				}
				this.SendPropertyChanged("Department");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MedicalField_Doctor", Storage="_MedicalField", ThisKey="MFID", OtherKey="MFID", IsForeignKey=true)]
	public MedicalField MedicalField
	{
		get
		{
			return this._MedicalField.Entity;
		}
		set
		{
			MedicalField previousValue = this._MedicalField.Entity;
			if (((previousValue != value) 
						|| (this._MedicalField.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._MedicalField.Entity = null;
					previousValue.Doctors.Remove(this);
				}
				this._MedicalField.Entity = value;
				if ((value != null))
				{
					value.Doctors.Add(this);
					this._MFID = value.MFID;
				}
				else
				{
					this._MFID = default(Nullable<int>);
				}
				this.SendPropertyChanged("MedicalField");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Timetables(Timetable entity)
	{
		this.SendPropertyChanging();
		entity.Doctor = this;
	}
	
	private void detach_Timetables(Timetable entity)
	{
		this.SendPropertyChanging();
		entity.Doctor = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Employees")]
public partial class Employee : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _EmployeeID;
	
	private string _Photo;
	
	private string _EmployeeName;
	
	private string _Email;
	
	private string _Password;
	
	private EntitySet<Appointment> _Appointments;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEmployeeIDChanging(int value);
    partial void OnEmployeeIDChanged();
    partial void OnPhotoChanging(string value);
    partial void OnPhotoChanged();
    partial void OnEmployeeNameChanging(string value);
    partial void OnEmployeeNameChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    #endregion
	
	public Employee()
	{
		this._Appointments = new EntitySet<Appointment>(new Action<Appointment>(this.attach_Appointments), new Action<Appointment>(this.detach_Appointments));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int EmployeeID
	{
		get
		{
			return this._EmployeeID;
		}
		set
		{
			if ((this._EmployeeID != value))
			{
				this.OnEmployeeIDChanging(value);
				this.SendPropertyChanging();
				this._EmployeeID = value;
				this.SendPropertyChanged("EmployeeID");
				this.OnEmployeeIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Photo", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
	public string Photo
	{
		get
		{
			return this._Photo;
		}
		set
		{
			if ((this._Photo != value))
			{
				this.OnPhotoChanging(value);
				this.SendPropertyChanging();
				this._Photo = value;
				this.SendPropertyChanged("Photo");
				this.OnPhotoChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeName", DbType="NVarChar(100)")]
	public string EmployeeName
	{
		get
		{
			return this._EmployeeName;
		}
		set
		{
			if ((this._EmployeeName != value))
			{
				this.OnEmployeeNameChanging(value);
				this.SendPropertyChanging();
				this._EmployeeName = value;
				this.SendPropertyChanged("EmployeeName");
				this.OnEmployeeNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
	public string Email
	{
		get
		{
			return this._Email;
		}
		set
		{
			if ((this._Email != value))
			{
				this.OnEmailChanging(value);
				this.SendPropertyChanging();
				this._Email = value;
				this.SendPropertyChanged("Email");
				this.OnEmailChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="NChar(50)")]
	public string Password
	{
		get
		{
			return this._Password;
		}
		set
		{
			if ((this._Password != value))
			{
				this.OnPasswordChanging(value);
				this.SendPropertyChanging();
				this._Password = value;
				this.SendPropertyChanged("Password");
				this.OnPasswordChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_Appointment", Storage="_Appointments", ThisKey="EmployeeID", OtherKey="EmployeeID")]
	public EntitySet<Appointment> Appointments
	{
		get
		{
			return this._Appointments;
		}
		set
		{
			this._Appointments.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Appointments(Appointment entity)
	{
		this.SendPropertyChanging();
		entity.Employee = this;
	}
	
	private void detach_Appointments(Appointment entity)
	{
		this.SendPropertyChanging();
		entity.Employee = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Finance")]
public partial class Finance : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _FinanceID;
	
	private string _FinancePassword;
	
	private string _FinanceName;
	
	private string _Username;
	
	private EntitySet<Appointment> _Appointments;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFinanceIDChanging(int value);
    partial void OnFinanceIDChanged();
    partial void OnFinancePasswordChanging(string value);
    partial void OnFinancePasswordChanged();
    partial void OnFinanceNameChanging(string value);
    partial void OnFinanceNameChanged();
    partial void OnUsernameChanging(string value);
    partial void OnUsernameChanged();
    #endregion
	
	public Finance()
	{
		this._Appointments = new EntitySet<Appointment>(new Action<Appointment>(this.attach_Appointments), new Action<Appointment>(this.detach_Appointments));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FinanceID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int FinanceID
	{
		get
		{
			return this._FinanceID;
		}
		set
		{
			if ((this._FinanceID != value))
			{
				this.OnFinanceIDChanging(value);
				this.SendPropertyChanging();
				this._FinanceID = value;
				this.SendPropertyChanged("FinanceID");
				this.OnFinanceIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FinancePassword", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
	public string FinancePassword
	{
		get
		{
			return this._FinancePassword;
		}
		set
		{
			if ((this._FinancePassword != value))
			{
				this.OnFinancePasswordChanging(value);
				this.SendPropertyChanging();
				this._FinancePassword = value;
				this.SendPropertyChanged("FinancePassword");
				this.OnFinancePasswordChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FinanceName", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
	public string FinanceName
	{
		get
		{
			return this._FinanceName;
		}
		set
		{
			if ((this._FinanceName != value))
			{
				this.OnFinanceNameChanging(value);
				this.SendPropertyChanging();
				this._FinanceName = value;
				this.SendPropertyChanged("FinanceName");
				this.OnFinanceNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Username", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
	public string Username
	{
		get
		{
			return this._Username;
		}
		set
		{
			if ((this._Username != value))
			{
				this.OnUsernameChanging(value);
				this.SendPropertyChanging();
				this._Username = value;
				this.SendPropertyChanged("Username");
				this.OnUsernameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Finance_Appointment", Storage="_Appointments", ThisKey="FinanceID", OtherKey="FinanceID")]
	public EntitySet<Appointment> Appointments
	{
		get
		{
			return this._Appointments;
		}
		set
		{
			this._Appointments.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Appointments(Appointment entity)
	{
		this.SendPropertyChanging();
		entity.Finance = this;
	}
	
	private void detach_Appointments(Appointment entity)
	{
		this.SendPropertyChanging();
		entity.Finance = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.LabReports")]
public partial class LabReport : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ReportID;
	
	private System.Nullable<int> _AppointmentID;
	
	private bool _PayStatus;
	
	private string _LabName;
	
	private System.DateTime _ReportDate;
	
	private EntitySet<LabReportsDetail> _LabReportsDetails;
	
	private EntityRef<Appointment> _Appointment;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnReportIDChanging(int value);
    partial void OnReportIDChanged();
    partial void OnAppointmentIDChanging(System.Nullable<int> value);
    partial void OnAppointmentIDChanged();
    partial void OnPayStatusChanging(bool value);
    partial void OnPayStatusChanged();
    partial void OnLabNameChanging(string value);
    partial void OnLabNameChanged();
    partial void OnReportDateChanging(System.DateTime value);
    partial void OnReportDateChanged();
    #endregion
	
	public LabReport()
	{
		this._LabReportsDetails = new EntitySet<LabReportsDetail>(new Action<LabReportsDetail>(this.attach_LabReportsDetails), new Action<LabReportsDetail>(this.detach_LabReportsDetails));
		this._Appointment = default(EntityRef<Appointment>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReportID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ReportID
	{
		get
		{
			return this._ReportID;
		}
		set
		{
			if ((this._ReportID != value))
			{
				this.OnReportIDChanging(value);
				this.SendPropertyChanging();
				this._ReportID = value;
				this.SendPropertyChanged("ReportID");
				this.OnReportIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AppointmentID", DbType="Int")]
	public System.Nullable<int> AppointmentID
	{
		get
		{
			return this._AppointmentID;
		}
		set
		{
			if ((this._AppointmentID != value))
			{
				if (this._Appointment.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnAppointmentIDChanging(value);
				this.SendPropertyChanging();
				this._AppointmentID = value;
				this.SendPropertyChanged("AppointmentID");
				this.OnAppointmentIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PayStatus", DbType="Bit NOT NULL")]
	public bool PayStatus
	{
		get
		{
			return this._PayStatus;
		}
		set
		{
			if ((this._PayStatus != value))
			{
				this.OnPayStatusChanging(value);
				this.SendPropertyChanging();
				this._PayStatus = value;
				this.SendPropertyChanged("PayStatus");
				this.OnPayStatusChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LabName", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
	public string LabName
	{
		get
		{
			return this._LabName;
		}
		set
		{
			if ((this._LabName != value))
			{
				this.OnLabNameChanging(value);
				this.SendPropertyChanging();
				this._LabName = value;
				this.SendPropertyChanged("LabName");
				this.OnLabNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReportDate", DbType="Date NOT NULL")]
	public System.DateTime ReportDate
	{
		get
		{
			return this._ReportDate;
		}
		set
		{
			if ((this._ReportDate != value))
			{
				this.OnReportDateChanging(value);
				this.SendPropertyChanging();
				this._ReportDate = value;
				this.SendPropertyChanged("ReportDate");
				this.OnReportDateChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LabReport_LabReportsDetail", Storage="_LabReportsDetails", ThisKey="ReportID", OtherKey="ReportID")]
	public EntitySet<LabReportsDetail> LabReportsDetails
	{
		get
		{
			return this._LabReportsDetails;
		}
		set
		{
			this._LabReportsDetails.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Appointment_LabReport", Storage="_Appointment", ThisKey="AppointmentID", OtherKey="AppointmentID", IsForeignKey=true)]
	public Appointment Appointment
	{
		get
		{
			return this._Appointment.Entity;
		}
		set
		{
			Appointment previousValue = this._Appointment.Entity;
			if (((previousValue != value) 
						|| (this._Appointment.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Appointment.Entity = null;
					previousValue.LabReports.Remove(this);
				}
				this._Appointment.Entity = value;
				if ((value != null))
				{
					value.LabReports.Add(this);
					this._AppointmentID = value.AppointmentID;
				}
				else
				{
					this._AppointmentID = default(Nullable<int>);
				}
				this.SendPropertyChanged("Appointment");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_LabReportsDetails(LabReportsDetail entity)
	{
		this.SendPropertyChanging();
		entity.LabReport = this;
	}
	
	private void detach_LabReportsDetails(LabReportsDetail entity)
	{
		this.SendPropertyChanging();
		entity.LabReport = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.LabReportsDetails")]
public partial class LabReportsDetail : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _DetailID;
	
	private System.Nullable<int> _ReportID;
	
	private System.Nullable<int> _TestID;
	
	private bool _FinancialApprovalStatus;
	
	private string _ResultPDF;
	
	private EntityRef<LabReport> _LabReport;
	
	private EntityRef<Test> _Test;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDetailIDChanging(int value);
    partial void OnDetailIDChanged();
    partial void OnReportIDChanging(System.Nullable<int> value);
    partial void OnReportIDChanged();
    partial void OnTestIDChanging(System.Nullable<int> value);
    partial void OnTestIDChanged();
    partial void OnFinancialApprovalStatusChanging(bool value);
    partial void OnFinancialApprovalStatusChanged();
    partial void OnResultPDFChanging(string value);
    partial void OnResultPDFChanged();
    #endregion
	
	public LabReportsDetail()
	{
		this._LabReport = default(EntityRef<LabReport>);
		this._Test = default(EntityRef<Test>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DetailID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int DetailID
	{
		get
		{
			return this._DetailID;
		}
		set
		{
			if ((this._DetailID != value))
			{
				this.OnDetailIDChanging(value);
				this.SendPropertyChanging();
				this._DetailID = value;
				this.SendPropertyChanged("DetailID");
				this.OnDetailIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReportID", DbType="Int")]
	public System.Nullable<int> ReportID
	{
		get
		{
			return this._ReportID;
		}
		set
		{
			if ((this._ReportID != value))
			{
				if (this._LabReport.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnReportIDChanging(value);
				this.SendPropertyChanging();
				this._ReportID = value;
				this.SendPropertyChanged("ReportID");
				this.OnReportIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TestID", DbType="Int")]
	public System.Nullable<int> TestID
	{
		get
		{
			return this._TestID;
		}
		set
		{
			if ((this._TestID != value))
			{
				if (this._Test.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnTestIDChanging(value);
				this.SendPropertyChanging();
				this._TestID = value;
				this.SendPropertyChanged("TestID");
				this.OnTestIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FinancialApprovalStatus", DbType="Bit NOT NULL")]
	public bool FinancialApprovalStatus
	{
		get
		{
			return this._FinancialApprovalStatus;
		}
		set
		{
			if ((this._FinancialApprovalStatus != value))
			{
				this.OnFinancialApprovalStatusChanging(value);
				this.SendPropertyChanging();
				this._FinancialApprovalStatus = value;
				this.SendPropertyChanged("FinancialApprovalStatus");
				this.OnFinancialApprovalStatusChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ResultPDF", DbType="NVarChar(300) NOT NULL", CanBeNull=false)]
	public string ResultPDF
	{
		get
		{
			return this._ResultPDF;
		}
		set
		{
			if ((this._ResultPDF != value))
			{
				this.OnResultPDFChanging(value);
				this.SendPropertyChanging();
				this._ResultPDF = value;
				this.SendPropertyChanged("ResultPDF");
				this.OnResultPDFChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LabReport_LabReportsDetail", Storage="_LabReport", ThisKey="ReportID", OtherKey="ReportID", IsForeignKey=true)]
	public LabReport LabReport
	{
		get
		{
			return this._LabReport.Entity;
		}
		set
		{
			LabReport previousValue = this._LabReport.Entity;
			if (((previousValue != value) 
						|| (this._LabReport.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._LabReport.Entity = null;
					previousValue.LabReportsDetails.Remove(this);
				}
				this._LabReport.Entity = value;
				if ((value != null))
				{
					value.LabReportsDetails.Add(this);
					this._ReportID = value.ReportID;
				}
				else
				{
					this._ReportID = default(Nullable<int>);
				}
				this.SendPropertyChanged("LabReport");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Test_LabReportsDetail", Storage="_Test", ThisKey="TestID", OtherKey="TestID", IsForeignKey=true)]
	public Test Test
	{
		get
		{
			return this._Test.Entity;
		}
		set
		{
			Test previousValue = this._Test.Entity;
			if (((previousValue != value) 
						|| (this._Test.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Test.Entity = null;
					previousValue.LabReportsDetails.Remove(this);
				}
				this._Test.Entity = value;
				if ((value != null))
				{
					value.LabReportsDetails.Add(this);
					this._TestID = value.TestID;
				}
				else
				{
					this._TestID = default(Nullable<int>);
				}
				this.SendPropertyChanged("Test");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MedicalField")]
public partial class MedicalField : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _MFID;
	
	private System.Nullable<int> _MMID;
	
	private string _Username;
	
	private string _MFName;
	
	private string _Email;
	
	private string _MFPassword;
	
	private long _Hotline;
	
	private string _MFAddress;
	
	private string _MFType;
	
	private EntitySet<Doctor> _Doctors;
	
	private EntityRef<MiddleMan> _MiddleMan;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMFIDChanging(int value);
    partial void OnMFIDChanged();
    partial void OnMMIDChanging(System.Nullable<int> value);
    partial void OnMMIDChanged();
    partial void OnUsernameChanging(string value);
    partial void OnUsernameChanged();
    partial void OnMFNameChanging(string value);
    partial void OnMFNameChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnMFPasswordChanging(string value);
    partial void OnMFPasswordChanged();
    partial void OnHotlineChanging(long value);
    partial void OnHotlineChanged();
    partial void OnMFAddressChanging(string value);
    partial void OnMFAddressChanged();
    partial void OnMFTypeChanging(string value);
    partial void OnMFTypeChanged();
    #endregion
	
	public MedicalField()
	{
		this._Doctors = new EntitySet<Doctor>(new Action<Doctor>(this.attach_Doctors), new Action<Doctor>(this.detach_Doctors));
		this._MiddleMan = default(EntityRef<MiddleMan>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MFID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int MFID
	{
		get
		{
			return this._MFID;
		}
		set
		{
			if ((this._MFID != value))
			{
				this.OnMFIDChanging(value);
				this.SendPropertyChanging();
				this._MFID = value;
				this.SendPropertyChanged("MFID");
				this.OnMFIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MMID", DbType="Int")]
	public System.Nullable<int> MMID
	{
		get
		{
			return this._MMID;
		}
		set
		{
			if ((this._MMID != value))
			{
				if (this._MiddleMan.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnMMIDChanging(value);
				this.SendPropertyChanging();
				this._MMID = value;
				this.SendPropertyChanged("MMID");
				this.OnMMIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Username", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
	public string Username
	{
		get
		{
			return this._Username;
		}
		set
		{
			if ((this._Username != value))
			{
				this.OnUsernameChanging(value);
				this.SendPropertyChanging();
				this._Username = value;
				this.SendPropertyChanged("Username");
				this.OnUsernameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MFName", DbType="NVarChar(100)")]
	public string MFName
	{
		get
		{
			return this._MFName;
		}
		set
		{
			if ((this._MFName != value))
			{
				this.OnMFNameChanging(value);
				this.SendPropertyChanging();
				this._MFName = value;
				this.SendPropertyChanged("MFName");
				this.OnMFNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
	public string Email
	{
		get
		{
			return this._Email;
		}
		set
		{
			if ((this._Email != value))
			{
				this.OnEmailChanging(value);
				this.SendPropertyChanging();
				this._Email = value;
				this.SendPropertyChanged("Email");
				this.OnEmailChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MFPassword", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
	public string MFPassword
	{
		get
		{
			return this._MFPassword;
		}
		set
		{
			if ((this._MFPassword != value))
			{
				this.OnMFPasswordChanging(value);
				this.SendPropertyChanging();
				this._MFPassword = value;
				this.SendPropertyChanged("MFPassword");
				this.OnMFPasswordChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Hotline", DbType="BigInt NOT NULL")]
	public long Hotline
	{
		get
		{
			return this._Hotline;
		}
		set
		{
			if ((this._Hotline != value))
			{
				this.OnHotlineChanging(value);
				this.SendPropertyChanging();
				this._Hotline = value;
				this.SendPropertyChanged("Hotline");
				this.OnHotlineChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MFAddress", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
	public string MFAddress
	{
		get
		{
			return this._MFAddress;
		}
		set
		{
			if ((this._MFAddress != value))
			{
				this.OnMFAddressChanging(value);
				this.SendPropertyChanging();
				this._MFAddress = value;
				this.SendPropertyChanged("MFAddress");
				this.OnMFAddressChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MFType", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
	public string MFType
	{
		get
		{
			return this._MFType;
		}
		set
		{
			if ((this._MFType != value))
			{
				this.OnMFTypeChanging(value);
				this.SendPropertyChanging();
				this._MFType = value;
				this.SendPropertyChanged("MFType");
				this.OnMFTypeChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MedicalField_Doctor", Storage="_Doctors", ThisKey="MFID", OtherKey="MFID")]
	public EntitySet<Doctor> Doctors
	{
		get
		{
			return this._Doctors;
		}
		set
		{
			this._Doctors.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MiddleMan_MedicalField", Storage="_MiddleMan", ThisKey="MMID", OtherKey="MMID", IsForeignKey=true)]
	public MiddleMan MiddleMan
	{
		get
		{
			return this._MiddleMan.Entity;
		}
		set
		{
			MiddleMan previousValue = this._MiddleMan.Entity;
			if (((previousValue != value) 
						|| (this._MiddleMan.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._MiddleMan.Entity = null;
					previousValue.MedicalFields.Remove(this);
				}
				this._MiddleMan.Entity = value;
				if ((value != null))
				{
					value.MedicalFields.Add(this);
					this._MMID = value.MMID;
				}
				else
				{
					this._MMID = default(Nullable<int>);
				}
				this.SendPropertyChanged("MiddleMan");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Doctors(Doctor entity)
	{
		this.SendPropertyChanging();
		entity.MedicalField = this;
	}
	
	private void detach_Doctors(Doctor entity)
	{
		this.SendPropertyChanging();
		entity.MedicalField = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Medicines")]
public partial class Medicine : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _MedicineID;
	
	private string _MedicineName;
	
	private decimal _Price;
	
	private EntitySet<PrescriptionsDetail> _PrescriptionsDetails;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMedicineIDChanging(int value);
    partial void OnMedicineIDChanged();
    partial void OnMedicineNameChanging(string value);
    partial void OnMedicineNameChanged();
    partial void OnPriceChanging(decimal value);
    partial void OnPriceChanged();
    #endregion
	
	public Medicine()
	{
		this._PrescriptionsDetails = new EntitySet<PrescriptionsDetail>(new Action<PrescriptionsDetail>(this.attach_PrescriptionsDetails), new Action<PrescriptionsDetail>(this.detach_PrescriptionsDetails));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MedicineID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int MedicineID
	{
		get
		{
			return this._MedicineID;
		}
		set
		{
			if ((this._MedicineID != value))
			{
				this.OnMedicineIDChanging(value);
				this.SendPropertyChanging();
				this._MedicineID = value;
				this.SendPropertyChanged("MedicineID");
				this.OnMedicineIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MedicineName", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
	public string MedicineName
	{
		get
		{
			return this._MedicineName;
		}
		set
		{
			if ((this._MedicineName != value))
			{
				this.OnMedicineNameChanging(value);
				this.SendPropertyChanging();
				this._MedicineName = value;
				this.SendPropertyChanged("MedicineName");
				this.OnMedicineNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Price", DbType="Decimal(18,0) NOT NULL")]
	public decimal Price
	{
		get
		{
			return this._Price;
		}
		set
		{
			if ((this._Price != value))
			{
				this.OnPriceChanging(value);
				this.SendPropertyChanging();
				this._Price = value;
				this.SendPropertyChanged("Price");
				this.OnPriceChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Medicine_PrescriptionsDetail", Storage="_PrescriptionsDetails", ThisKey="MedicineID", OtherKey="MedicineID")]
	public EntitySet<PrescriptionsDetail> PrescriptionsDetails
	{
		get
		{
			return this._PrescriptionsDetails;
		}
		set
		{
			this._PrescriptionsDetails.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_PrescriptionsDetails(PrescriptionsDetail entity)
	{
		this.SendPropertyChanging();
		entity.Medicine = this;
	}
	
	private void detach_PrescriptionsDetails(PrescriptionsDetail entity)
	{
		this.SendPropertyChanging();
		entity.Medicine = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MiddleMan")]
public partial class MiddleMan : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _MMID;
	
	private string _Username;
	
	private string _MMName;
	
	private string _Email;
	
	private string _MMPassword;
	
	private EntitySet<MedicalField> _MedicalFields;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMMIDChanging(int value);
    partial void OnMMIDChanged();
    partial void OnUsernameChanging(string value);
    partial void OnUsernameChanged();
    partial void OnMMNameChanging(string value);
    partial void OnMMNameChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnMMPasswordChanging(string value);
    partial void OnMMPasswordChanged();
    #endregion
	
	public MiddleMan()
	{
		this._MedicalFields = new EntitySet<MedicalField>(new Action<MedicalField>(this.attach_MedicalFields), new Action<MedicalField>(this.detach_MedicalFields));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MMID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int MMID
	{
		get
		{
			return this._MMID;
		}
		set
		{
			if ((this._MMID != value))
			{
				this.OnMMIDChanging(value);
				this.SendPropertyChanging();
				this._MMID = value;
				this.SendPropertyChanged("MMID");
				this.OnMMIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Username", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
	public string Username
	{
		get
		{
			return this._Username;
		}
		set
		{
			if ((this._Username != value))
			{
				this.OnUsernameChanging(value);
				this.SendPropertyChanging();
				this._Username = value;
				this.SendPropertyChanged("Username");
				this.OnUsernameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MMName", DbType="NVarChar(20)")]
	public string MMName
	{
		get
		{
			return this._MMName;
		}
		set
		{
			if ((this._MMName != value))
			{
				this.OnMMNameChanging(value);
				this.SendPropertyChanging();
				this._MMName = value;
				this.SendPropertyChanged("MMName");
				this.OnMMNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
	public string Email
	{
		get
		{
			return this._Email;
		}
		set
		{
			if ((this._Email != value))
			{
				this.OnEmailChanging(value);
				this.SendPropertyChanging();
				this._Email = value;
				this.SendPropertyChanged("Email");
				this.OnEmailChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MMPassword", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
	public string MMPassword
	{
		get
		{
			return this._MMPassword;
		}
		set
		{
			if ((this._MMPassword != value))
			{
				this.OnMMPasswordChanging(value);
				this.SendPropertyChanging();
				this._MMPassword = value;
				this.SendPropertyChanged("MMPassword");
				this.OnMMPasswordChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MiddleMan_MedicalField", Storage="_MedicalFields", ThisKey="MMID", OtherKey="MMID")]
	public EntitySet<MedicalField> MedicalFields
	{
		get
		{
			return this._MedicalFields;
		}
		set
		{
			this._MedicalFields.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_MedicalFields(MedicalField entity)
	{
		this.SendPropertyChanging();
		entity.MiddleMan = this;
	}
	
	private void detach_MedicalFields(MedicalField entity)
	{
		this.SendPropertyChanging();
		entity.MiddleMan = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Prescriptions")]
public partial class Prescription : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _PrescriptionID;
	
	private System.Nullable<int> _AppointmentID;
	
	private int _PayStatus;
	
	private System.Nullable<bool> _Monthly;
	
	private System.Nullable<System.DateTime> _SupplyDate;
	
	private EntitySet<PrescriptionsDetail> _PrescriptionsDetails;
	
	private EntityRef<Appointment> _Appointment;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPrescriptionIDChanging(int value);
    partial void OnPrescriptionIDChanged();
    partial void OnAppointmentIDChanging(System.Nullable<int> value);
    partial void OnAppointmentIDChanged();
    partial void OnPayStatusChanging(int value);
    partial void OnPayStatusChanged();
    partial void OnMonthlyChanging(System.Nullable<bool> value);
    partial void OnMonthlyChanged();
    partial void OnSupplyDateChanging(System.Nullable<System.DateTime> value);
    partial void OnSupplyDateChanged();
    #endregion
	
	public Prescription()
	{
		this._PrescriptionsDetails = new EntitySet<PrescriptionsDetail>(new Action<PrescriptionsDetail>(this.attach_PrescriptionsDetails), new Action<PrescriptionsDetail>(this.detach_PrescriptionsDetails));
		this._Appointment = default(EntityRef<Appointment>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PrescriptionID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int PrescriptionID
	{
		get
		{
			return this._PrescriptionID;
		}
		set
		{
			if ((this._PrescriptionID != value))
			{
				this.OnPrescriptionIDChanging(value);
				this.SendPropertyChanging();
				this._PrescriptionID = value;
				this.SendPropertyChanged("PrescriptionID");
				this.OnPrescriptionIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AppointmentID", DbType="Int")]
	public System.Nullable<int> AppointmentID
	{
		get
		{
			return this._AppointmentID;
		}
		set
		{
			if ((this._AppointmentID != value))
			{
				if (this._Appointment.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnAppointmentIDChanging(value);
				this.SendPropertyChanging();
				this._AppointmentID = value;
				this.SendPropertyChanged("AppointmentID");
				this.OnAppointmentIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PayStatus", DbType="Int NOT NULL")]
	public int PayStatus
	{
		get
		{
			return this._PayStatus;
		}
		set
		{
			if ((this._PayStatus != value))
			{
				this.OnPayStatusChanging(value);
				this.SendPropertyChanging();
				this._PayStatus = value;
				this.SendPropertyChanged("PayStatus");
				this.OnPayStatusChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Monthly", DbType="Bit")]
	public System.Nullable<bool> Monthly
	{
		get
		{
			return this._Monthly;
		}
		set
		{
			if ((this._Monthly != value))
			{
				this.OnMonthlyChanging(value);
				this.SendPropertyChanging();
				this._Monthly = value;
				this.SendPropertyChanged("Monthly");
				this.OnMonthlyChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SupplyDate", DbType="Date")]
	public System.Nullable<System.DateTime> SupplyDate
	{
		get
		{
			return this._SupplyDate;
		}
		set
		{
			if ((this._SupplyDate != value))
			{
				this.OnSupplyDateChanging(value);
				this.SendPropertyChanging();
				this._SupplyDate = value;
				this.SendPropertyChanged("SupplyDate");
				this.OnSupplyDateChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Prescription_PrescriptionsDetail", Storage="_PrescriptionsDetails", ThisKey="PrescriptionID", OtherKey="PrescriptionID")]
	public EntitySet<PrescriptionsDetail> PrescriptionsDetails
	{
		get
		{
			return this._PrescriptionsDetails;
		}
		set
		{
			this._PrescriptionsDetails.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Appointment_Prescription", Storage="_Appointment", ThisKey="AppointmentID", OtherKey="AppointmentID", IsForeignKey=true)]
	public Appointment Appointment
	{
		get
		{
			return this._Appointment.Entity;
		}
		set
		{
			Appointment previousValue = this._Appointment.Entity;
			if (((previousValue != value) 
						|| (this._Appointment.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Appointment.Entity = null;
					previousValue.Prescriptions.Remove(this);
				}
				this._Appointment.Entity = value;
				if ((value != null))
				{
					value.Prescriptions.Add(this);
					this._AppointmentID = value.AppointmentID;
				}
				else
				{
					this._AppointmentID = default(Nullable<int>);
				}
				this.SendPropertyChanged("Appointment");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_PrescriptionsDetails(PrescriptionsDetail entity)
	{
		this.SendPropertyChanging();
		entity.Prescription = this;
	}
	
	private void detach_PrescriptionsDetails(PrescriptionsDetail entity)
	{
		this.SendPropertyChanging();
		entity.Prescription = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PrescriptionsDetails")]
public partial class PrescriptionsDetail : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _DetailID;
	
	private System.Nullable<int> _PrescriptionID;
	
	private bool _FinanceApprovalStatus;
	
	private int _Quantity;
	
	private int _Frequency;
	
	private string _Notes;
	
	private System.Nullable<int> _MedicineID;
	
	private EntityRef<Prescription> _Prescription;
	
	private EntityRef<Medicine> _Medicine;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDetailIDChanging(int value);
    partial void OnDetailIDChanged();
    partial void OnPrescriptionIDChanging(System.Nullable<int> value);
    partial void OnPrescriptionIDChanged();
    partial void OnFinanceApprovalStatusChanging(bool value);
    partial void OnFinanceApprovalStatusChanged();
    partial void OnQuantityChanging(int value);
    partial void OnQuantityChanged();
    partial void OnFrequencyChanging(int value);
    partial void OnFrequencyChanged();
    partial void OnNotesChanging(string value);
    partial void OnNotesChanged();
    partial void OnMedicineIDChanging(System.Nullable<int> value);
    partial void OnMedicineIDChanged();
    #endregion
	
	public PrescriptionsDetail()
	{
		this._Prescription = default(EntityRef<Prescription>);
		this._Medicine = default(EntityRef<Medicine>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DetailID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int DetailID
	{
		get
		{
			return this._DetailID;
		}
		set
		{
			if ((this._DetailID != value))
			{
				this.OnDetailIDChanging(value);
				this.SendPropertyChanging();
				this._DetailID = value;
				this.SendPropertyChanged("DetailID");
				this.OnDetailIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PrescriptionID", DbType="Int")]
	public System.Nullable<int> PrescriptionID
	{
		get
		{
			return this._PrescriptionID;
		}
		set
		{
			if ((this._PrescriptionID != value))
			{
				if (this._Prescription.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnPrescriptionIDChanging(value);
				this.SendPropertyChanging();
				this._PrescriptionID = value;
				this.SendPropertyChanged("PrescriptionID");
				this.OnPrescriptionIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FinanceApprovalStatus", DbType="Bit NOT NULL")]
	public bool FinanceApprovalStatus
	{
		get
		{
			return this._FinanceApprovalStatus;
		}
		set
		{
			if ((this._FinanceApprovalStatus != value))
			{
				this.OnFinanceApprovalStatusChanging(value);
				this.SendPropertyChanging();
				this._FinanceApprovalStatus = value;
				this.SendPropertyChanged("FinanceApprovalStatus");
				this.OnFinanceApprovalStatusChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Quantity", DbType="Int NOT NULL")]
	public int Quantity
	{
		get
		{
			return this._Quantity;
		}
		set
		{
			if ((this._Quantity != value))
			{
				this.OnQuantityChanging(value);
				this.SendPropertyChanging();
				this._Quantity = value;
				this.SendPropertyChanged("Quantity");
				this.OnQuantityChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Frequency", DbType="Int NOT NULL")]
	public int Frequency
	{
		get
		{
			return this._Frequency;
		}
		set
		{
			if ((this._Frequency != value))
			{
				this.OnFrequencyChanging(value);
				this.SendPropertyChanging();
				this._Frequency = value;
				this.SendPropertyChanged("Frequency");
				this.OnFrequencyChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Notes", DbType="NVarChar(300)")]
	public string Notes
	{
		get
		{
			return this._Notes;
		}
		set
		{
			if ((this._Notes != value))
			{
				this.OnNotesChanging(value);
				this.SendPropertyChanging();
				this._Notes = value;
				this.SendPropertyChanged("Notes");
				this.OnNotesChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MedicineID", DbType="Int")]
	public System.Nullable<int> MedicineID
	{
		get
		{
			return this._MedicineID;
		}
		set
		{
			if ((this._MedicineID != value))
			{
				if (this._Medicine.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnMedicineIDChanging(value);
				this.SendPropertyChanging();
				this._MedicineID = value;
				this.SendPropertyChanged("MedicineID");
				this.OnMedicineIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Prescription_PrescriptionsDetail", Storage="_Prescription", ThisKey="PrescriptionID", OtherKey="PrescriptionID", IsForeignKey=true)]
	public Prescription Prescription
	{
		get
		{
			return this._Prescription.Entity;
		}
		set
		{
			Prescription previousValue = this._Prescription.Entity;
			if (((previousValue != value) 
						|| (this._Prescription.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Prescription.Entity = null;
					previousValue.PrescriptionsDetails.Remove(this);
				}
				this._Prescription.Entity = value;
				if ((value != null))
				{
					value.PrescriptionsDetails.Add(this);
					this._PrescriptionID = value.PrescriptionID;
				}
				else
				{
					this._PrescriptionID = default(Nullable<int>);
				}
				this.SendPropertyChanged("Prescription");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Medicine_PrescriptionsDetail", Storage="_Medicine", ThisKey="MedicineID", OtherKey="MedicineID", IsForeignKey=true)]
	public Medicine Medicine
	{
		get
		{
			return this._Medicine.Entity;
		}
		set
		{
			Medicine previousValue = this._Medicine.Entity;
			if (((previousValue != value) 
						|| (this._Medicine.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Medicine.Entity = null;
					previousValue.PrescriptionsDetails.Remove(this);
				}
				this._Medicine.Entity = value;
				if ((value != null))
				{
					value.PrescriptionsDetails.Add(this);
					this._MedicineID = value.MedicineID;
				}
				else
				{
					this._MedicineID = default(Nullable<int>);
				}
				this.SendPropertyChanged("Medicine");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Tests")]
public partial class Test : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _TestID;
	
	private string _TestName;
	
	private decimal _Price;
	
	private EntitySet<LabReportsDetail> _LabReportsDetails;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTestIDChanging(int value);
    partial void OnTestIDChanged();
    partial void OnTestNameChanging(string value);
    partial void OnTestNameChanged();
    partial void OnPriceChanging(decimal value);
    partial void OnPriceChanged();
    #endregion
	
	public Test()
	{
		this._LabReportsDetails = new EntitySet<LabReportsDetail>(new Action<LabReportsDetail>(this.attach_LabReportsDetails), new Action<LabReportsDetail>(this.detach_LabReportsDetails));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TestID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int TestID
	{
		get
		{
			return this._TestID;
		}
		set
		{
			if ((this._TestID != value))
			{
				this.OnTestIDChanging(value);
				this.SendPropertyChanging();
				this._TestID = value;
				this.SendPropertyChanged("TestID");
				this.OnTestIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TestName", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
	public string TestName
	{
		get
		{
			return this._TestName;
		}
		set
		{
			if ((this._TestName != value))
			{
				this.OnTestNameChanging(value);
				this.SendPropertyChanging();
				this._TestName = value;
				this.SendPropertyChanged("TestName");
				this.OnTestNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Price", DbType="Decimal(18,0) NOT NULL")]
	public decimal Price
	{
		get
		{
			return this._Price;
		}
		set
		{
			if ((this._Price != value))
			{
				this.OnPriceChanging(value);
				this.SendPropertyChanging();
				this._Price = value;
				this.SendPropertyChanged("Price");
				this.OnPriceChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Test_LabReportsDetail", Storage="_LabReportsDetails", ThisKey="TestID", OtherKey="TestID")]
	public EntitySet<LabReportsDetail> LabReportsDetails
	{
		get
		{
			return this._LabReportsDetails;
		}
		set
		{
			this._LabReportsDetails.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_LabReportsDetails(LabReportsDetail entity)
	{
		this.SendPropertyChanging();
		entity.Test = this;
	}
	
	private void detach_LabReportsDetails(LabReportsDetail entity)
	{
		this.SendPropertyChanging();
		entity.Test = null;
	}
}
#pragma warning restore 1591
